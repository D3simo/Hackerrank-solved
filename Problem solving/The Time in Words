import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the "timeInWords" function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. INTEGER h
     *  2. INTEGER m
     */

    public static String timeInWords(int h, int m) {
    // Write your code here
        String minOutput;
        String finalOutput = "";
        int Hposition = h - 1;
        int Mposition = m % 10 - 1;
        int position = m - 1;
        String[] hours = new String[] {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven" , "twelve"};  
        String[] Hmin = new String[] {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven" , "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};  
        if (m < 15 && m > 0 && m != 1) {
            minOutput = Hmin[position] + " " + "minutes" + " " + "past";
            finalOutput = minOutput + " " + hours[Hposition];
        } else if (m == 15) {
            minOutput = "quarter past";
            finalOutput = minOutput + " " + hours[Hposition];
        } else if (m > 15 && m < 20) {
            minOutput = Hmin[position] + " " + "minutes" + " " + "past";
            finalOutput = minOutput + " " + hours[Hposition];
        } else if (m > 20 && m < 30) {
            minOutput = "twenty" + " " + Hmin[Mposition] + " " + "minutes" + " " + "past";
            finalOutput = minOutput + " " + hours[Hposition];
        } else if (m == 30) {
            minOutput = "half" + " " + "past";
            finalOutput = minOutput + " " + hours[Hposition];
        } else if (m > 30 && m < 40) {
            minOutput = "twenty" + " " + Hmin[40 - m - 1] + " " + "minutes" + " " + "to";
            finalOutput = minOutput + " " + hours[Hposition + 1];
        } else if (m > 40 && m < 45) {
            minOutput = Hmin[60 - m - 1] + " " + "minutes" + " " + "to";
            finalOutput = minOutput + " " + hours[Hposition + 1];
        } else if (m == 45) {
            minOutput = "quarter" + " " + "to";
            finalOutput = minOutput + " " + hours[Hposition + 1];
        } else if (m > 45) {
            minOutput = Hmin[60 - m - 1] + " " + "minutes" + " " + "to";
            finalOutput = minOutput + " " + hours[Hposition + 1];
        } else if (m == 0){
            minOutput = "o' clock";
            finalOutput = hours[Hposition] + " " + minOutput;
        } else if (m == 1) {
            minOutput = "one minute past";
            finalOutput = minOutput + " " + hours[Hposition];
        }
        return finalOutput;
    }
    // String time;

    // if (m == 0) {
    //     time = num[h] + " o' clock";
    // }
    // else if (m == 15) {
    //     time = num[m] + " past " + num[h];
    // }
    // else if (m == 30) {
    //     time = num[0] + " past " + num[h];
    // }
    // else if (m == 45) {
    //     time = num[15] + " to " + num[h+1];
    // }
    // else if (m == 1) {
    //     time = num[1] + " minute past " + num[h];
    // }
    // else if (m <= 20) {
    //     time = num[m] + " minutes past " + num[h];
    // }
    // else if (m < 30) {
    //     time = num[20] + " " + num[m-20] + " minutes past " + num[h];
    // }
    // else if (m < 40) {
    //     time = num[20] + " " + num[40-m] + " minutes to " + num[h+1];
    // }
    // else {
    //     time = num[60-m] + " minutes to " + num[h+1];
    // }

    // return time;
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("oUTPUT_PATH")));

        int h = Integer.parseInt(bufferedReader.readLine().trim());

        int m = Integer.parseInt(bufferedReader.readLine().trim());

        String result = Result.timeInWords(h, m);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
